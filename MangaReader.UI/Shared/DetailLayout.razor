@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<ErrorBoundary @ref="@_errorBoundary">
    <ChildContent>
            @Body
    </ChildContent>
    <ErrorContent Context="ex">
        <div class="pa-5" style="user-select: text;">
            <div class="d-flex justify-space-between align-center">
                <MudAlert Class="mr-2"
                          Variant="Variant.Filled"
                          Dense="true"
                          Severity="Severity.Error">Chương trình gặp phải lỗi không xác định!</MudAlert>

                <MudButton Variant="Variant.Outlined"
                           Size="Size.Small"
                           IconColor="Color.Primary"
                           OnClick="@(()=>ResetError(ex))">Reset</MudButton>
            </div>
            <div class="error-message mt-3">
                @($"{ex.Message}{Environment.NewLine}{ex.StackTrace}")
            </div>
        </div>
    </ErrorContent>
</ErrorBoundary>

@code {
    private bool _isDarkMode;
    private ErrorBoundary? _errorBoundary;
    // private MudThemeProvider _mudThemeProvider;
    // private MudTheme _customTheme;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // _customTheme = CustomTheme.Theme;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // switch (Settings.Environment.General.AppThemeInt)
            // {
            //     case 0:
            //         _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            //         break;
            //     case 1:
            //         _isDarkMode = false;
            //         break;
            //     case 2:
            //         _isDarkMode = true;
            //         break;
            //     default:
            //         break;
            // }
            // await InvokeAsync(StateHasChanged);
            // await NativeTheme.SetThemeAsync(_isDarkMode);
            // if (Settings.Environment.General.IsAutoCheckUpdate)
            // {
            //     await AutoUpgrade.DoAsync(true);
            // }
        }
    }

    private void ResetError(Exception ex)
    {

        _errorBoundary?.Recover();
    }


}